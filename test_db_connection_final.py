import psycopg2
import socket
import ssl
import sys
from urllib.parse import urlparse

def test_dns(hostname):
    """Teste la r√©solution DNS d'un nom d'h√¥te"""
    try:
        ip = socket.gethostbyname(hostname)
        print(f"‚úÖ R√©solution DNS r√©ussie pour {hostname} -> {ip}")
        return True
    except socket.gaierror as e:
        print(f"‚ùå √âchec de la r√©solution DNS pour {hostname}: {e}")
        print("   V√©rifiez votre connexion Internet et vos param√®tres DNS.")
        print("   Essayez de modifier vos serveurs DNS pour utiliser 8.8.8.8 (Google) ou 1.1.1.1 (Cloudflare).")
        return False

def test_port(hostname, port, timeout=5):
    """Teste si un port est accessible sur un h√¥te"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(timeout)
            result = s.connect_ex((hostname, port))
            if result == 0:
                print(f"‚úÖ Le port {port} est accessible sur {hostname}")
                return True
            else:
                print(f"‚ùå Le port {port} n'est pas accessible sur {hostname} (code: {result})")
                return False
    except Exception as e:
        print(f"‚ùå Erreur lors du test du port {port} sur {hostname}: {e}")
        return False

def test_db_connection():
    """Teste la connexion √† la base de donn√©es Supabase"""
    # Param√®tres de connexion
    db_params = {
        'dbname': 'coursdb',
        'user': 'postgres',
        'password': 'Senegale1228/',
        'host': 'db.xsepgmurvwguoygdmlza.supabase.co',
        'port': 5432,
        'sslmode': 'require',
        'connect_timeout': 10
    }
    
    print("\nüîç Test de connexion √† Supabase PostgreSQL")
    print("=" * 50)
    
    # 1. Test de r√©solution DNS
    print("\n1. Test de r√©solution DNS...")
    if not test_dns(db_params['host']):
        print("\n‚ùå Impossible de continuer sans r√©solution DNS.")
        return
    
    # 2. Test de connexion au port
    print("\n2. Test de connexion au port...")
    if not test_port(db_params['host'], db_params['port']):
        print("\n‚ùå Impossible de se connecter au port de la base de donn√©es.")
        print("   V√©rifiez votre pare-feu et que votre IP est autoris√©e dans les param√®tres Supabase.")
        return
    
    # 3. Test de connexion √† la base de donn√©es
    print("\n3. Test de connexion √† la base de donn√©es...")
    try:
        # Cr√©er un contexte SSL personnalis√©
        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE
        
        # √âtablir la connexion avec SSL
        conn = psycopg2.connect(
            dbname=db_params['dbname'],
            user=db_params['user'],
            password=db_params['password'],
            host=db_params['host'],
            port=db_params['port'],
            sslmode=db_params['sslmode'],
            sslrootcert=None,
            sslcert=None,
            sslkey=None,
            sslcrl=None,
            sslsni=0,
            ssl_min_protocol_version=None,
            ssl_max_protocol_version=None,
            ssl_compression=False,
            ssl_context=ssl_context,
            connect_timeout=db_params['connect_timeout']
        )
        
        # Tester la connexion
        with conn.cursor() as cur:
            cur.execute("SELECT version();")
            version = cur.fetchone()
            print(f"‚úÖ Connexion r√©ussie √† PostgreSQL!")
            print(f"   Version du serveur: {version[0]}")
            
            # Lister les tables
            cur.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
            """)
            tables = cur.fetchall()
            print("\nüìã Tables dans la base de donn√©es:")
            for table in tables:
                print(f"   - {table[0]}")
            
        conn.close()
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        print("\nüîß Solutions possibles:")
        print("1. V√©rifiez que l'h√¥te et le port sont corrects")
        print("2. V√©rifiez vos identifiants de connexion")
        print("3. V√©rifiez que votre adresse IP est autoris√©e dans les param√®tres de Supabase")
        print("4. V√©rifiez votre connexion Internet et votre pare-feu")
    except Exception as e:
        print(f"‚ùå Erreur inattendue: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üîÑ D√©marrage du test de connexion √† Supabase...")
    test_db_connection()
    print("\n‚úÖ Test termin√©!")
